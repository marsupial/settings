%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: OSL
file_extensions:
  - osl
  - h
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.osl

variables:
  identifier: \b[[:alpha:]_][[:alnum:]_]*\b # upper and lowercase
  macro_identifier: \b[[:upper:]_][[:upper:][:digit:]_]{2,}\b # only uppercase, at least 3 chars
  control_keywords: 'return|for|if|else|do|while|goto|continue|break|switch|case|default'
  non_func_keywords: 'if|for|switch|while'
  basic_types: 'void|bool|int|float|string|matrix|point|vector|normal|color|shader|surface|displacement|light|volum'
  before_tag: 'struct'
  storage_classes: 'output|closure'
  type_qualifier: 'const'
  compiler_directive: ''
  # Not working for function defintion rule
  # compiler_directive: 'shader|surface|displacement|light|volume'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'

contexts:
  main:
    - include: preprocessor-global
    - include: global

  #############################################################################
  # Reusable contexts
  #
  # The follow contexts are currently constructed to be reused in the C++
  # syntax. They are specifically constructed to not push into sub-contexts,
  # which ensures that C++ code isn't accidentally lexed as plain C. They also
  # should not use the {{identifier}} variable since that is different for C++.
  #############################################################################

  comments:
    - match: \[\[
      scope: punctuation.definition.comment.osl
      push:
        - meta_scope: comment.block.osl
        - match: \]\]
          scope: punctuation.definition.comment.osl
          pop: true
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.osl
      captures:
        1: meta.toc-list.banner.block.osl
    - match: /\*
      scope: punctuation.definition.comment.osl
      push:
        - meta_scope: comment.block.osl
        - match: \*/
          scope: punctuation.definition.comment.osl
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.osl
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.osl
      captures:
        1: meta.toc-list.banner.line.osl
    - match: //
      scope: punctuation.definition.comment.osl
      push:
        - meta_scope: comment.line.double-slash.osl
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.osl
        - match: \n
          pop: true

  strings:
    - match: '(L|u8|u|U)?(")'
      captures:
        1: storage.type.string.osl
        2: punctuation.definition.string.begin.osl
      push:
        - meta_scope: string.quoted.double.osl
        - match: '"'
          scope: punctuation.definition.string.end.osl
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(L|u8|u|U)?(')"
      captures:
        1: storage.type.string.osl
        2: punctuation.definition.string.begin.osl
      push:
        - meta_scope: string.quoted.single.osl
        - match: "'"
          scope: punctuation.definition.string.end.osl
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.osl
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.osl
    - match: \\.
      scope: invalid.illegal.unknown-escape.osl

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.osl

  keywords:
    - match: \b({{control_keywords}})\b
      scope: keyword.control.osl

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.osl

  constants:
    - match: \b(true|false|TRUE|FALSE)\b
      scope: constant.language.osl
    # common C constant naming idiom -- kConstantVariable
    - match: '\bk[A-Z]\w*\b'
      scope: constant.other.variable.mac-classic.osl

  functions:
    - match: \b(aastep|abs|acos|area|arraylength|asin|atan|atan2|blackbody|bump|calculatenormal|ceil|cellnoise|clamp|color|concat|cooktorrance|cos|cosh|cross|degrees|determinant|dict_find|dict_next|dict_value|dielectric|diffuse|displace|distance|dot|Dx|Dy|Dz|emission|endswith|environment|erf|erfc|error|exit|exp|exp2|expm1|fabs|faceforward|filterwidth|floor|fmod|format|fprintf|fresnel|getattribute|getattribute|getmatrix|getmessage|gettextureinfo|hash|hypot|hypot|inversesqrt|isconnected|isfinite|isinf|isnan|length|log|log10|log2|logb|luminance|matrix|max|microfacet_beckmann|microfacet_ggx|min|mix|mod|noise|normalize|orennayar|phong|pnoise|pointcloud_get|pointcloud_search|pointcloud_write|pow|printf|psnoise|ptype|radians|random|raytype|reflect|reflection|refract|refraction|regex_match|regex_search|rotate|round|setmessage|sign|sin|sincos|sinh|smoothstep|snoise|spline|splineinverse|sqrt|startswith|step|strlen|substr|subsurface|surfacearea|tan|tanh|texture|texture3d|trace|transform|transformc|transformu|translucence|transparent|transpose|trunc|ward|warning|wavelength_color)\b
      scope: support.function.osl

  types:
    - match: \b({{basic_types}}|{{before_tag}})\b
      scope: storage.type.osl

  numbers:
    - match: '\b((0(x|X)[0-9a-fA-F]*(\.[0-9a-fA-F]+p-?\d+)?)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([fF]|(l{1,2}|L{1,2})[uU]?|[uU](l{0,2}|L{0,2}))?\b'
      scope: constant.numeric.osl

  operators:
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.osl
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.osl
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.osl
    - match: \+|\-|/|%|\||\^|~|!
      scope: keyword.operator.arithmetic.osl
    - match: \=
      scope: keyword.operator.assignment.osl
    - match: '\.\.\.'
      scope: keyword.operator.variadic.osl

  access-illegal:
    - match: \.\.(?!\.)
      scope: invalid.illegal.syntax.osl

  access:
    - match: '(\.)({{identifier}})(?!\s*\()'
      captures:
        1: punctuation.accessor.osl
        2: variable.other.member.osl
    - include: access-illegal
    - match: \.(?!\.)
      scope: punctuation.accessor.osl

  label:
    - match: '^\s*((?!default){{identifier}})(:)(?!:)'
      captures:
        1: entity.name.label.osl
        2: punctuation.separator.osl

  preprocessor-disabled:
    - match: ^\s*(#\s*if(n?def)?)\b
      captures:
        1: meta.preprocessor.osl
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.osl
          pop: true
        - include: preprocessor-disabled
        - include: pragma-mark
    - include: pragma-mark

  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.osl
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.osl

  preprocessor-line-ending:
    - match: $\n
      pop: true

  # Comment handling in preprocessor directives are complicated by the fact
  # that a single-line comment will normally consume the newline to prevent
  # completions from being presented to the user. Additionally, a multi-line
  # comment without a line continuation ends at the newline.
  preprocessor-comments:
    - match: /\*
      scope: punctuation.definition.comment.osl
      push:
        - meta_scope: comment.block.osl
        - match: '\\$\n'
          scope: punctuation.separator.continuation.osl
        - match: \*/
          scope: punctuation.definition.comment.osl
          pop: true
    - match: //
      scope: punctuation.definition.comment.osl
      push:
        - meta_scope: comment.line.double-slash.osl
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.osl
          pop: true
        - match: (?=\n)
          pop: true

  pragma-mark:
    - match: ^\s*((#\s*pragma\s+mark)\s+(.*))
      scope: meta.section.osl
      captures:
        1: meta.preprocessor.osl
        2: keyword.control.import.pragma.osl
        3: meta.toc-list.pragma-mark.osl

  # Used by "inc" snippets to prevent double ##include
  incomplete-inc:
    - match: '^\s*(#i(nc?)?)\b\s*'
      scope: meta.preprocessor.incomplete.osl

  #############################################################################
  # The following are C-specific scopes that should not be reused. This is
  # because they push into subcontexts and use variables that are C-specific.
  #############################################################################

  global:
    - include: early-expressions
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  statements:
    - include: preprocessor-statements
    - include: label
    - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: access
    - include: typedef
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    - match: ','
      scope: punctuation.separator.osl
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.osl

  late-expressions:
    - include: modifiers-parens
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.osl

  ## C-specific contexts

  global-modifier:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/union
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{control_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    # Allow a macro call
    - match: '({{identifier}})\s*(\()(?=[^\)]+\))'
      captures:
        1: variable.function.osl
        2: meta.group.osl punctuation.section.group.begin.osl
      push:
        - meta_scope: meta.function-call.osl
        - meta_content_scope: meta.group.osl
        - match: '\)'
          scope: meta.group.osl punctuation.section.group.end.osl
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set:
        - include: function-call
        - match: ''
          pop: true
    - include: types
    - match: '{{identifier}}'
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - include: types
    - include: modifiers-parens
    - include: modifiers
    # All uppercase identifier just before a newline is most likely a macro
    - match: '[[:upper:][:digit:]_]+\s*$'
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|$))(?=\s+)'
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.osl entity.name.function.osl
      set: function-definition-params
    - match: '(?=\S)'
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.osl
    - include: comments
    - match: '(?=\()'
      set:
        - match: \(
          scope: meta.function.parameters.osl meta.group.osl punctuation.section.group.begin.osl
          set:
            - meta_content_scope: meta.function.parameters.osl meta.group.osl
            - match : \)
              scope: punctuation.section.group.end.osl
              set: function-definition-continue
            - match: '\bvoid\b'
              scope: storage.type.osl
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.osl
            - include: expressions
            - include: preprocessor-line-continuation
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.osl
    - include: comments
    - match: '(?=;)'
      pop: true
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.osl
    - match: '\{'
      scope: meta.block.osl punctuation.section.block.begin.osl
      set:
        - meta_content_scope: meta.function.osl meta.block.osl
        - match: '\}'
          scope: meta.function.osl meta.block.osl punctuation.section.block.end.osl
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
          push: data-structures
        - include: statements

  data-structures:
    # Detect variable type definitions using struct/enum/union followed by a tag
    - match: '\b({{before_tag}})(?=\s+{{identifier}}\s+{{identifier}}\s*[=;\[])'
      scope: storage.type.osl
    - match: '\bstruct\b'
      scope: storage.type.osl
      set: data-structures-struct-definition
    - match: '(?=\S)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.osl
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.struct.forward-decl.osl
    - match: '{{identifier}}'
      scope: entity.name.struct.osl
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.osl punctuation.section.block.begin.osl
      set:
        - meta_content_scope: meta.struct.osl meta.block.osl
        - match: '\}'
          scope: meta.struct.osl meta.block.osl punctuation.section.block.end.osl
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.osl
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.enum.forward-decl.osl
    - match: '{{identifier}}'
      scope: entity.name.enum.osl
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.osl punctuation.section.block.begin.osl
      set:
        - meta_content_scope: meta.enum.osl meta.block.osl
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.osl meta.block.osl punctuation.section.block.end.osl
          pop: true
        - include: data-structures-body

  data-structures-union-definition:
    - meta_scope: meta.union.osl
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.union.forward-decl.osl
    - match: '{{identifier}}'
      scope: entity.name.union.osl
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.osl punctuation.section.block.begin.osl
      set:
        - meta_content_scope: meta.union.osl meta.block.osl
        - match: '\}'
          scope: meta.union.osl meta.block.osl punctuation.section.block.end.osl
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - match: '(?=\b(?:{{before_tag}}|{{control_keywords}})\b)'
      pop: true
    - include: modifiers-parens
    - include: modifiers
    # Handle macros so they aren't matched as the class name
    - match: '\b[[:upper:][:digit:]_]+\b'

  data-structures-definition-common-end:
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.osl
      push:
        - meta_scope: meta.block.osl
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.osl
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section.group.begin.osl
      push:
        - meta_scope: meta.group.osl
        - match: \)
          scope: punctuation.section.group.end.osl
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.osl
      push:
        - meta_scope: meta.brackets.osl
        - match: \]
          scope: punctuation.section.brackets.end.osl
          pop: true
        - include: expressions

  case-default:
    - match: '\b(default|case)\b'
      scope: keyword.control.osl
      push:
        - match: ':'
          scope: punctuation.separator.osl
          pop: true
        - include: expressions

  function-call:
    - match: (?={{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.osl
        - include: functions
        - match: '{{identifier}}'
          scope: variable.function.osl
        - match: '\('
          scope: meta.group.osl punctuation.section.group.begin.osl
          set:
            - meta_content_scope: meta.function-call.osl meta.group.osl
            - match : \)
              scope: meta.function-call.osl meta.group.osl punctuation.section.group.end.osl
              pop: true
            - include: expressions

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.osl
        2: keyword.control.import.osl
        3: constant.numeric.preprocessor.osl
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.osl
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.else.osl
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.osl
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.osl
        2: keyword.control.import.osl
        3: constant.numeric.preprocessor.osl
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.osl
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.else.osl
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.osl
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  ## Preprocessor for global

  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-expressions:
    - include: incomplete-inc
    - include: preprocessor-macro-define
    - include: pragma-mark
    - include: preprocessor-other

  preprocessor-rule-disabled-global:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.osl
        2: keyword.control.import.osl
        3: constant.numeric.preprocessor.osl
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.osl
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.else.osl
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.osl
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-global:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.osl
        2: keyword.control.import.osl
        3: constant.numeric.preprocessor.osl
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.osl
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.else.osl
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.osl
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.osl
      push:
        - meta_scope: meta.preprocessor.osl
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.osl
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \{
      scope: punctuation.section.block.begin.osl
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.osl
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \}
      scope: punctuation.section.block.end.osl
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.osl
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      set: preprocessor-block-finish-if-branch-global
    - match: \}
      scope: punctuation.section.block.end.osl
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      pop: true
    - match: \}
      scope: punctuation.section.block.end.osl
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: preprocessor-global
    - include: global

  ## Preprocessor for statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.osl
        2: keyword.control.import.osl
        3: constant.numeric.preprocessor.osl
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.osl
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.else.osl
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.osl
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.osl
        2: keyword.control.import.osl
        3: constant.numeric.preprocessor.osl
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.osl
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.osl keyword.control.import.else.osl
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.osl
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.osl
      push:
        - meta_scope: meta.preprocessor.osl
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.osl
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \{
      scope: punctuation.section.block.begin.osl
      set: preprocessor-block-if-branch-statements
    - match: (?=(?!{{non_func_keywords}}){{identifier}}\s*\()
      set: preprocessor-if-branch-function-call
    - include: negated-block
    - include: statements

  preprocessor-if-branch-function-call:
    - meta_content_scope: meta.function-call.osl
    - include: functions
    - match: '{{identifier}}'
      scope: variable.function.osl
    - match: '\('
      scope: meta.group.osl punctuation.section.group.begin.osl
      set: preprocessor-if-branch-function-call-arguments

  preprocessor-if-branch-function-call-arguments:
    - meta_content_scope: meta.function-call.osl meta.group.osl
    - match : \)
      scope: meta.function-call.osl meta.group.osl punctuation.section.group.end.osl
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*(?:elif|else))\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      set: preprocessor-if-branch-function-call-arguments-finish
    - include: expressions

  preprocessor-if-branch-function-call-arguments-finish:
    - meta_content_scope: meta.function-call.osl meta.group.osl
    - match: \)
      scope: meta.function-call.osl meta.group.osl punctuation.section.group.end.osl
      pop: true
    - include: expressions

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.osl
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \}
      scope: punctuation.section.block.end.osl
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.osl
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      set: preprocessor-block-finish-if-branch-statements
    - match: \}
      scope: punctuation.section.block.end.osl
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
      pop: true
    - match: \}
      scope: punctuation.section.block.end.osl
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.osl
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.osl
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.osl keyword.control.import.define.osl
      push:
        - meta_content_scope: meta.preprocessor.macro.osl
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '({{identifier}})(?=\()'
          scope: entity.name.function.preprocessor.osl
          set:
            - match: '\('
              scope: punctuation.section.group.begin.osl
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.osl
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.osl meta.group.osl
    - match: '{{identifier}}'
      scope: variable.parameter.osl
    - match: \)
      scope: punctuation.section.group.end.osl
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.osl
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.osl
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '\.\.\.'
          scope: keyword.operator.variadic.osl
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.osl
          captures:
            1: punctuation.definition.comment.osl
            2: punctuation.definition.comment.osl
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.osl
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '\.\.\.'
      scope: keyword.operator.variadic.osl
    - match: (/\*).*(\*/)
      scope: comment.block.osl
      captures:
        1: punctuation.definition.comment.osl
        2: punctuation.definition.comment.osl
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.osl

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.osl
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.osl
    - match: '\}'
      scope: punctuation.section.block.end.osl
    - include: expressions

  preprocessor-practical-workarounds:
    - include: preprocessor-convention-ignore-uppercase-ident-lines
    - include: preprocessor-convention-ignore-uppercase-calls-without-semicolon

  preprocessor-convention-ignore-uppercase-ident-lines:
    - match: ^(\s*{{macro_identifier}})+\s*$
      scope: meta.assumed-macro.osl

  preprocessor-convention-ignore-uppercase-calls-without-semicolon:
    - match: ^\s*({{macro_identifier}})\s*(\()(?=[^)]*\)\s*$)
      captures:
        1: variable.function.assumed-macro.osl
        2: punctuation.section.group.begin.osl
      push:
        - meta_scope: meta.assumed-macro.osl
        - match: \)
          scope: punctuation.section.group.end.osl
          pop: true
        - include: expressions

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|line|pragma|undef))\b
      captures:
        1: keyword.control.import.osl
      push:
        - meta_scope: meta.preprocessor.osl
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.osl
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.osl keyword.control.import.osl
    - match: ^\s*(#\s*(?:error|warning))\b
      captures:
        1: keyword.control.import.error.osl
      push:
        - meta_scope: meta.preprocessor.diagnostic.osl
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - include: strings
        - match: '\S+'
          scope: string.unquoted.osl
    - match: ^\s*(#\s*(?:include|include_next|import))\b
      captures:
        1: keyword.control.import.include.osl
      push:
        - meta_scope: meta.preprocessor.include.osl
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '"'
          scope: punctuation.definition.string.begin.osl
          push:
            - meta_scope: string.quoted.double.include.osl
            - match: '"'
              scope: punctuation.definition.string.end.osl
              pop: true
        - match: <
          scope: punctuation.definition.string.begin.osl
          push:
            - meta_scope: string.quoted.other.lt-gt.include.osl
            - match: ">"
              scope: punctuation.definition.string.end.osl
              pop: true
    - include: preprocessor-practical-workarounds
