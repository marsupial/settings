{
    // These are the default settings. They are located in
    //
    //    (Installed) Packages/CMakeBuilder/CMakeBuilder.sublime-settings
    //    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //
    // You should not edit this file, as it gets overwritten after every update.
    // Instead, if you want to override the default settings, create a new file
    // in Packages/User/CMakeBuilder.sublime-settings, and copy and paste over
    // from this file. Then change what you want.
    //
    // If you came here from
    //
    //    Preferences -> Package Settings -> CMakeBuilder -> Settings,
    //
    // then Sublime Text has already opened a "user" file for you to the right
    // of this view in which you may override settings.

    //==========================================================================

    // The path to the CMake binary. If CMake is in your PATH, then you don't
    // have to change this. Otherwise, specify the full path to the CMake
    // executable.
    "cmake_binary": "cmake",

    // If there's a compile_commands.json file generated with
    // CMAKE_EXPORT_COMPILE_COMMANDS, do we want to copy it over to the source
    // directory? This is useful for, for instance, clangd.
    // See: https://clang.llvm.org/extra/clangd.html
    // See: https://clang.llvm.org/docs/JSONCompilationDatabase.html
    // See: https://cmake.org/cmake/help/v3.5/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html
    "copy_compile_commands_to_project_path": false,

    // If CMAKE_EXPORT_COMPILE_COMMANDS is ON, enhance the compilation database
    // JSON file for header files, too. This is a heuristic and may not work in
    // all cases.
    "enhance_compile_commands_with_header_info": false,

    // Wether to auto-update "ecc_flags_sources" upon a succesful configure
    // to point to the compilation database.
    "auto_update_EasyClangComplete_compile_commands_location": false,

    // Wether to auto-update the "compile_commands" key upon a succesful
    // configure to point to the compilation database.
    "auto_update_compile_commands_project_setting": false,

    // Set this to true to always open an output panel when the server starts
    // to configure the project. If false, the output panel will only display
    // when an error occurs.
    "server_configure_verbose": false,

    // If the command "CMakeBuilder: Configure" exited with status 0, should we
    // write/update build targets in the sublime project file immediately?
    "write_build_targets_after_successful_configure": true,

    // If true, adds the option -Wno-dev to the cmake invocation during
    // configure time.
    "silence_developer_warnings": false,

    // If true, completely clears the cache when you run
    // "CMakeBuilder: Configure"
    "always_clear_cache_before_configure": false,

    // If true, every time you save a CMakeLists.txt file, or a CMakeCache.txt
    // file, or make changes to the "cmake" dictionary in the project settings,
    // the "Configure" command will run.
    "configure_on_save": true,

    // The command line arguments that are passed to CTest when you run the
    // command "CMakeBuilder: Run CTest".
    "ctest_command_line_args": "--output-on-failure",

    // When the command "CMakeBuilder: Write Build Targets" is run, what should
    // the name be of the generated build system?
    "generated_name_for_build_system": "${project_base_name} (${platform})"
}
